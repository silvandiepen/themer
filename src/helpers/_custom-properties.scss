@use "sass:map";

@import "../helpers/case";

$prefix: null;
$cached-variables: ();

/// init Prefix Properties mixin
// --------------------------
/// Initialize and set the prefix for the project
///
/// @access public
/// @group cached utilities
/// @param {}
/// @return {void}
///
@mixin initPrefix() {
  @if $prefix == null {
    $prefix-value: map.get($settings, "prefix");

    @if $prefix-value {
      $prefix: "#{$prefix-value}-" !global;
    } @else {
      $prefix: "" !global;
    }
  }
}
@include initPrefix();

/// Custom Properties mixin
// --------------------------
/// Create custom properties from map
///
/// @access public
/// @group case utilities
/// @param {map} $group
/// @return {string}
///
@mixin customProperties($group) {
  @each $name, $value in $group {
    @if $value == "" {
      $value: '""';
    }
    --#{$prefix}#{camelCaseToKebabCase($name)}: #{$value};
  }
}

/// Set Variable Cached
// --------------------------
/// Adds a key with value to the cached variables
///
/// @access public
/// @group cached utilities
/// @param {key: string, value: string}
/// @return {map}
///

@function set-variable-cached($key, $value) {
  //  Directly return cached variables when the key is a class
  @if str-contains($key, ".") {
    @return $cached-variables;
  }
  @return map.set($cached-variables, $key, $value);
}

/// Get Variable Value
// --------------------------
/// Gets the value of a variable if it has a default
///
/// @access public
/// @group variable utilities
/// @param {var: string, default: string}
/// @return {string}
///

@function get-variable-value($var, $default) {
  @if map.get($cached-variables, $var) {
    $default: map.get($cached-variables, $var);
  } @else if has-default($var) and $default == "" {
    $default: get-default($var);
    $cached-variables: set-variable-cached($var, $default) !global;
  } @else if
    type-of($default) ==
    "string" and
    $default !=
    "" and
    isCamelCase($default)
  {
    $default: variable($default);
    $cached-variables: set-variable-cached($var, $default) !global;
  }

  @return $default;
}

/// Variable Name
// --------------------------
/// Creates the variable name
///
/// @access public
/// @group variable utilities
/// @param {var: string}
/// @return {string}
///

@function variable-name($var) {
  $variable: "--#{$prefix}#{camelCaseToKebabCase($var)}";

  @return $variable;
}

/// Variable
// --------------------------
/// Main function to create a variable, based on it parent and automatically adds defaults
///
/// @access public
/// @group variable utilities
/// @param {var: string, default: string}
/// @return {string}
///

@function variable($var, $default: "") {
  // Key to save direct responses
  $cached-key: "#{$var}+#{$default}";

  // Check if the value exists in cache and return if true.
  $cached-value: map.get($cached-defaults, $cached-key);
  @if $cached-value {
    @return $cached-value;
  }

  // Create variable name
  $variable: variable-name($var);

  $cached-var-value: map.get($cached-defaults, $var);
  @if $cached-var-value {
    $default: $cached-var-value;
  } @else {
    $default: get-variable-value($var, $default);
  }

  // Return
  $returnValue: "";
  @if $default != "" {
    $returnValue: var(#{$variable}, $default);
  } @else {
    $returnValue: #{$var};
  }

  $cached-variables: set-variable-cached($cached-key, $returnValue) !global;

  @return $returnValue;
}
