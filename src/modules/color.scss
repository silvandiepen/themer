@use "sass:map";
@use "sass:math";

$cache-bg: null;
$cache-fg: null;
$cache-bg-var: null;
$cache-fg-var: null;
$cache-bg-light: null;
$cache-fg-light: null;
$cache-avg-light: null;
$darkmode: null;
$mix-color: null;

@function has-color($key) {
  @if type-of($colors) == "map" {
    @return map-has-key($colors, $key);
  } @else {
    @warn "colors is not a map but: #{type-of($colors)}";
    @return false;
  }
}

@function get-color($key) {
  @if type-of($colors) == "map" {
    @if map-has-key($colors, $key) {
      @return map-get($colors, $key);
    } @else {
      @warn "#{$key} does not exist in colors";
    }
  } @else {
    @warn "colors is not a map but: #{type-of($colors)}";
    @return false;
  }
}
@function getMixColor($color) {
  @if $cache-bg == null {
    $cache-bg: get-color("background") !global;
  }
  @if $cache-fg == null {
    $cache-fg: get-color("foreground") !global;
  }
  @if $cache-bg == $color {
    @return $cache-fg;
  } @else {
    @return $cache-bg;
  }
}

@function addShades($colors, $shades: ()) {
  $shade-colors: ();

  @each $color-name, $color-value in $colors {
    @if length($shades) > 0 {
      @each $shade in $shades {
        $shade-colors: map.set(
          $shade-colors,
          "#{$color-name}#{$shade}",
          mix($color-value, getMixColor($color-value), $shade)
        );
      }
    }
  }

  @return map.merge($colors, $shade-colors);
}

@function addTextColor($colors) {
  $text-colors: ();
  @each $color-name, $color-value in $colors {
    $text-colors: map.set(
      $text-colors,
      "#{$color-name}Text",
      getTextColor($color-value)
    );
  }
  @return map.merge($colors, $text-colors);
}

@function getTextColor($color-value) {
  @if $cache-bg == null {
    $cache-bg: get-color("background") !global;
  }
  @if $cache-fg == null {
    $cache-fg: get-color("foreground") !global;
  }
  @if $cache-bg-var == null {
    $cache-bg-var: #{variable(background)} !global;
  }
  @if $cache-bg-light == null {
    $cache-bg-light: lightness($cache-bg) !global;
  }
  @if $cache-fg-light == null {
    $cache-fg-light: lightness($cache-fg) !global;
  }
  @if $cache-fg-var == null {
    $cache-fg-var: #{variable(foreground)} !global;
  }

  @if $cache-avg-light == null {
    $cache-avg-light: math.div(($cache-bg-light + $cache-fg-light), 2) !global;
  }

  @if $darkmode == null {
    $darkmode: ($cache-bg-light > $cache-fg-light) !global;
  }

  $lightness: lightness($color-value);

  @if $darkmode {
    @if $lightness < $cache-avg-light {
      $color-value: $cache-bg-var;
    } @else {
      $color-value: $cache-fg-var;
    }
  } @else {
    @if $lightness < $cache-avg-light {
      $color-value: $cache-fg-var;
    } @else {
      $color-value: $cache-bg-var;
    }
  }

  @return $color-value;
}
